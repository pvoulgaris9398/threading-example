We work primarily with C# and Angular, and some technologies that a candidate may not been exposed
to. To be productive a successful candidate would need to come up to speed quickly. This exercise is
intended to test the willingness and ability to learn quickly. Please complete and return within 3 days.
This exercise should demonstrate your ability to perform multithreaded programming in a safe manner.
Pay close attention to the following:
1. Demonstrate a suitable method for ensuring synchronized access to a single file.
2. Demonstrate clean well-constructed legible code with proper exception handling and proper
error handling (e.g. what happens if you cannot create this file, what happens if a bkg thread
throws an exception, what happens in the UI if an event handler encounters an unhandled
exception?)
3. Demonstrate if possible effective object oriented programming techniques where appropriate.
4. Demonstrate your ability to run your code in a docker container and access system resources.
Using C# language, dotnet 6 runtime, create a Windows console application which does the following:
1. Create a text file at location /log/out.txt.
2. Initialize this file by writing the string “0, 0, &lt;current_time_stamp&gt;” to the first line of the file
where &lt;current_time_stamp&gt; is a string of the form HH:MM:SS.mmm (HH = hours, MM =
minutes, SS=seconds, mmm = milliseconds to 3 decimal places.)
3. Launch 10 threads to run simultaneously.
4. Each thread then should append 10 lines to the file as fast as possible (i.e. do not insert sleeps or
spin waits – however appropriate protection must be added to synchronize access to the file
shared resource).
5. When writing the next line, the line count must always be incremented by one, regardless of
which thread is performing the write.
6. Each line shall be written in a following format: “&lt;line_count&gt;, &lt;thread_id&gt;,
&lt;current_time_stamp&gt;”
7. Each thread should gracefully terminate after it has performed 10 writes to the file.
8. When all ten threads have terminated, wait for a character press, then exit.
Please create developer technical notes that describe application and any special considerations.
When done, the contents of the file would look something like this:
0, 0, 10:00:00.000
1, 101, 10:00:00.001
2, 132, 10:00:00.013